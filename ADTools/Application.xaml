<Application x:Class="Application"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:local="clr-namespace:ADTools"
    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
    ShutdownMode="OnExplicitShutdown"
>

    <Application.Resources>
        <local:ConverterBooleanAnd x:Key="ConverterBooleanAnd" />
        <local:ConverterBooleanInverted x:Key="ConverterBooleanInverted" />
        <local:ConverterBooleanToEnum x:Key="ConverterBooleanToEnum" />
        <local:ConverterBooleanToVisibility x:Key="ConverterBooleanToVisibility"/>
        <local:ConverterBooleanToVisibilityInverted x:Key="ConverterBooleanToVisibilityInverted"/>
        <local:ConverterBooleanToWidthStar x:Key="ConverterBooleanToWidthStar"/>
        <local:ConverterDataToUIElement x:Key="ConverterDataToUIElement" />
        <local:ConverterDesiredWidthToVisibility x:Key="ConverterDesiredWidthToVisibility" />
        <local:ConverterEnumToVisibility x:Key="ConverterEnumToVisibility" />
        <local:ConverterIntegerToVisibility x:Key="ConverterIntegerToVisibility"/>
        <local:ConverterToSingleLine x:Key="ConverterToSingleLine"/>
        <local:ConverterTreeViewItemDepthToMargin x:Key="ConverterTreeViewItemDepthToMargin"/>
        
        <sys:Double x:Key="FontSizePage">12</sys:Double>
        <sys:Double x:Key="FontSizeSmall">12</sys:Double>

        <SolidColorBrush Color="Black" x:Key="ColorText" />
        <SolidColorBrush Color="WhiteSmoke" x:Key="ColorWindowBackground" />
        <SolidColorBrush Color="White" x:Key="ColorElementBackground" />
        <SolidColorBrush Color="WhiteSmoke" x:Key="ColorMenuBackground" />
        <SolidColorBrush Color="LightSkyBlue" x:Key="ColorButtonBackground" />
        <SolidColorBrush Color="#FFD2EBFB" x:Key="ColorButtonInactiveBackground" />
        <SolidColorBrush Color="White" x:Key="ColorListviewRow" />
        <SolidColorBrush Color="AliceBlue" x:Key="ColorListviewAlternationRow" />

        <Style TargetType="{x:Type Button}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Background" Value="{DynamicResource ColorButtonBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ColorButtonBackground}" />
            <Setter Property="Foreground" Value="{DynamicResource ColorText}" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border BorderThickness="1,1,1,1" BorderBrush="{TemplateBinding BorderBrush}">
                            <Grid Background="{TemplateBinding Background}">
                                <Grid x:Name="Overlay" Background="{DynamicResource ColorElementBackground}" Opacity="0"/>
                                <Border Padding="{TemplateBinding Padding}">
                                    <ContentPresenter x:Name="MyContentPresenter" 
                                              Content="{TemplateBinding Content}"
                                              HorizontalAlignment="Center" 
                                              VerticalAlignment="Center" />
                                </Border>
                            </Grid>

                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.2" />
                                        <VisualTransition GeneratedDuration="0" To="Pressed" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.3"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.6" Duration="0"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="{DynamicResource ColorButtonInactiveBackground}"/>
                    <Setter Property="Foreground" Value="{DynamicResource ColorText}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style TargetType="NavigationWindow" x:Key="{x:Type NavigationWindow}">
            <EventSetter Event="Loaded" Handler="Window_Loaded"/>
            <Setter Property="WindowChrome.WindowChrome">
                <Setter.Value>
                    <WindowChrome CaptionHeight="32" ResizeBorderThickness="4" GlassFrameThickness="1"/>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="{DynamicResource ColorWindowBackground}" />
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="NavigationWindow">

                        <Border>
                            <!--If there is no wrap container for DockPanel it's margin take no effect-->
                            <Border Background="{DynamicResource ColorWindowBackground}" BorderThickness="1" BorderBrush="{x:Static SystemParameters.WindowGlassBrush}">
                                <Border.Style>
                                    <Style TargetType="Border">
                                        <Setter Property="Margin" Value="0" />

                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type NavigationWindow}}, Path=WindowState}" Value="Maximized">
                                                <Setter Property="Margin" Value="7,7,8,7" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Border.Style>
                                
                                <DockPanel>
                                    
                                    <!--Header DockPanel-->
                                    <DockPanel LastChildFill="True" DockPanel.Dock="Top" Height="32">

                                        <!--App icon-->
                                        <Image Source="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type NavigationWindow}}, Path=Icon}" Margin="3" RenderOptions.BitmapScalingMode="HighQuality">
                                            <Image.Style>
                                                <Style TargetType="Image">
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                    <Style.Triggers>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding ElementName=btnBack, Path=IsEnabled}" Value="False"/>
                                                                <Condition Binding="{Binding ElementName=btnForward, Path=IsEnabled}" Value="False"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                        </MultiDataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Image.Style>
                                        </Image>
                                        
                                        <!--Back Button-->
                                        <Button x:Name="btnBack" Focusable="False" Command="NavigationCommands.BrowseBack" Width="32" VerticalAlignment="Stretch" WindowChrome.IsHitTestVisibleInChrome="True">
                                            <Button.ContextMenu>
                                                <ContextMenu ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BackStack}">
                                                    <ContextMenu.ItemTemplate>
                                                        <DataTemplate>
                                                            <Button Command="NavigationCommands.NavigateJournal"
                                                            CommandParameter="{Binding RelativeSource={RelativeSource Self}}"
                                                            Content="{Binding Name}">
                                                                <Button.Template>
                                                                    <ControlTemplate TargetType="Button">
                                                                        <TextBlock Text="{TemplateBinding Content}"/>
                                                                    </ControlTemplate>
                                                                </Button.Template>
                                                            </Button>
                                                        </DataTemplate>
                                                    </ContextMenu.ItemTemplate>
                                                </ContextMenu>
                                            </Button.ContextMenu>
                                            <Button.Style>
                                                <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                                    <Style.Triggers>
                                                        <Trigger Property="IsEnabled" Value="false">
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Button.Style>
                                            <Path Data="M 5 0 L 0 5 L 5 10 L 0 5 L 11 5 L 0 5 Z" Stroke="{DynamicResource ColorText}" VerticalAlignment="Center" Height="11" Width="12"/>
                                        </Button>

                                        <!--Forward Button-->
                                        <Button x:Name="btnForward" Focusable="False" Command="NavigationCommands.BrowseForward" Width="32" VerticalAlignment="Stretch" WindowChrome.IsHitTestVisibleInChrome="True">
                                            <Button.ContextMenu>
                                                <ContextMenu ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ForwardStack}">
                                                    <ContextMenu.ItemTemplate>
                                                        <DataTemplate>
                                                            <Button Command="NavigationCommands.NavigateJournal"
                                                            CommandParameter="{Binding RelativeSource={RelativeSource Self}}"
                                                            Content="{Binding Name}">
                                                                <Button.Template>
                                                                    <ControlTemplate TargetType="Button">
                                                                        <TextBlock Text="{TemplateBinding Content}"/>
                                                                    </ControlTemplate>
                                                                </Button.Template>
                                                            </Button>
                                                        </DataTemplate>
                                                    </ContextMenu.ItemTemplate>
                                                </ContextMenu>
                                            </Button.ContextMenu>
                                            <Button.Style>
                                                <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                                    <Setter Property="Background" Value="{DynamicResource ColorButtonBackground}"/>
                                                    <Setter Property="BorderThickness" Value="{DynamicResource ColorButtonBackground}"/>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsEnabled" Value="false">
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Button.Style>
                                            <Path x:Name="Arrow" Data="M 6 0 L 11 5 L 6 10 L 11 5 L 0 5 L 11 5 Z" Stroke="{DynamicResource ColorText}" VerticalAlignment="Center" Height="11" Width="12"/>
                                        </Button>

                                        <!--Default Buttons-->
                                        <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" VerticalAlignment="Stretch" WindowChrome.IsHitTestVisibleInChrome="True">
                                            <Button Focusable="False" Width="47" SnapsToDevicePixels="True" Click="btnMinimize_Click">
                                                <Button.Style>
                                                    <Style TargetType="Button">
                                                        <Setter Property="Background" Value="{DynamicResource ColorWindowBackground}"/>
                                                        <Setter Property="Foreground" Value="{DynamicResource ColorText}"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type Button}">
                                                                    <Border Background="{TemplateBinding Background}">
                                                                        <Grid>
                                                                            <Grid x:Name="Overlay" Background="{DynamicResource ColorText}" Opacity="0"/>
                                                                            <Path Data="M 0 20 L 20 20 Z"
                                                                                Stroke="{TemplateBinding Foreground}"
                                                                                VerticalAlignment="Center"
                                                                                StrokeThickness="1"
                                                                                StrokeMiterLimit="0"
                                                                                Stretch="Uniform"
                                                                                Width="10" Height="10"/>
                                                                        </Grid>

                                                                        <VisualStateManager.VisualStateGroups>
                                                                            <VisualStateGroup x:Name="CommonStates">
                                                                                <VisualStateGroup.Transitions>
                                                                                    <VisualTransition GeneratedDuration="0:0:0.2" />
                                                                                    <VisualTransition GeneratedDuration="0" To="Pressed" />
                                                                                </VisualStateGroup.Transitions>
                                                                                <VisualState x:Name="Normal" />
                                                                                <VisualState x:Name="MouseOver">
                                                                                    <Storyboard>
                                                                                        <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.1"/>
                                                                                    </Storyboard>
                                                                                </VisualState>
                                                                                <VisualState x:Name="Pressed">
                                                                                    <Storyboard>
                                                                                        <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.2" Duration="0"/>
                                                                                    </Storyboard>
                                                                                </VisualState>
                                                                            </VisualStateGroup>
                                                                        </VisualStateManager.VisualStateGroups>
                                                                    </Border>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </Button.Style>
                                            </Button>
                                            <Button Focusable="False" Width="47" SnapsToDevicePixels="True" Click="btnMaximize_Click">
                                                <Button.Style>
                                                    <Style TargetType="Button">
                                                        <Setter Property="Background" Value="{DynamicResource ColorWindowBackground}"/>
                                                        <Setter Property="Foreground" Value="{DynamicResource ColorText}"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type Button}">
                                                                    <Border Background="{TemplateBinding Background}">
                                                                        <Grid>
                                                                            <Grid x:Name="Overlay" Background="{DynamicResource ColorText}" Opacity="0"/>
                                                                            <Path Data="M 5 0 L 20 0 L 20 15 L 15 15 L 15 5 L 5 5 Z M 5 1 L 20 1 Z M 0 5 L 15 5 L 15 20 L 0 20 Z M 0 6 L 15 6 Z"
                                                                                Stroke="{TemplateBinding Foreground}"
                                                                                VerticalAlignment="Center"
                                                                                StrokeThickness="1"
                                                                                StrokeMiterLimit="0"
                                                                                Stretch="Uniform"
                                                                                Width="10" Height="10">
                                                                                <Path.Style>
                                                                                    <Style TargetType="Path">
                                                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                                                        <Style.Triggers>
                                                                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type NavigationWindow}}, Path=WindowState}" Value="Maximized">
                                                                                                <Setter Property="Visibility" Value="Visible" />
                                                                                            </DataTrigger>
                                                                                        </Style.Triggers>
                                                                                    </Style>
                                                                                </Path.Style>
                                                                            </Path>
                                                                            <Path Data="M 0 0 L 20 0 L 20 20 L 0 20 Z M 0 2 L 20 2 Z"
                                                                                Stroke="{DynamicResource ColorText}"
                                                                                VerticalAlignment="Center"
                                                                                StrokeThickness="1"
                                                                                StrokeMiterLimit="0"
                                                                                Stretch="Uniform"
                                                                                Width="10" Height="10">
                                                                                <Path.Style>
                                                                                    <Style TargetType="Path">
                                                                                        <Setter Property="Visibility" Value="Visible" />
                                                                                        <Style.Triggers>
                                                                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type NavigationWindow}}, Path=WindowState}" Value="Maximized">
                                                                                                <Setter Property="Visibility" Value="Collapsed" />
                                                                                            </DataTrigger>
                                                                                        </Style.Triggers>
                                                                                    </Style>
                                                                                </Path.Style>
                                                                            </Path>

                                                                        </Grid>

                                                                        <VisualStateManager.VisualStateGroups>
                                                                            <VisualStateGroup x:Name="CommonStates">
                                                                                <VisualStateGroup.Transitions>
                                                                                    <VisualTransition GeneratedDuration="0:0:0.2" />
                                                                                    <VisualTransition GeneratedDuration="0" To="Pressed" />
                                                                                </VisualStateGroup.Transitions>
                                                                                <VisualState x:Name="Normal" />
                                                                                <VisualState x:Name="MouseOver">
                                                                                    <Storyboard>
                                                                                        <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.1"/>
                                                                                    </Storyboard>
                                                                                </VisualState>
                                                                                <VisualState x:Name="Pressed">
                                                                                    <Storyboard>
                                                                                        <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.2" Duration="0"/>
                                                                                    </Storyboard>
                                                                                </VisualState>
                                                                            </VisualStateGroup>
                                                                        </VisualStateManager.VisualStateGroups>
                                                                    </Border>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </Button.Style>
                                            </Button>
                                            <Button Focusable="False" Width="47" SnapsToDevicePixels="True" Click="btnClose_Click">
                                                <Button.Style>
                                                    <Style TargetType="{x:Type Button}">
                                                        <Setter Property="Background" Value="{DynamicResource ColorWindowBackground}"/>
                                                        <Setter Property="Foreground" Value="{DynamicResource ColorText}"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type Button}">
                                                                    <Border Background="{TemplateBinding Background}">
                                                                        <Grid>
                                                                            <Grid x:Name="Overlay" Background="#ffe81123" Opacity="0"/>
                                                                            <Path x:Name="Cross" Data="M 0 0 L 20 20 Z M 0 20 L 20 0 Z"
                                                                                Stroke="{TemplateBinding Foreground}"
                                                                                VerticalAlignment="Center"
                                                                                StrokeMiterLimit="0"
                                                                                Stretch="Uniform"
                                                                                Width="10" Height="10"/>
                                                                        </Grid>

                                                                        <VisualStateManager.VisualStateGroups>
                                                                            <VisualStateGroup x:Name="CommonStates">
                                                                                <VisualStateGroup.Transitions>
                                                                                    <VisualTransition GeneratedDuration="0:0:0.2" />
                                                                                    <VisualTransition GeneratedDuration="0" To="Pressed" />
                                                                                </VisualStateGroup.Transitions>
                                                                                <VisualState x:Name="Normal" />
                                                                                <VisualState x:Name="MouseOver">
                                                                                    <Storyboard>
                                                                                        <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="1"/>
                                                                                        <ColorAnimation Storyboard.TargetName="Cross" Storyboard.TargetProperty="(Path.Stroke).(SolidColorBrush.Color)" To="White"/>
                                                                                    </Storyboard>
                                                                                </VisualState>
                                                                                <VisualState x:Name="Pressed">
                                                                                    <Storyboard>
                                                                                        <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.7" Duration="0"/>
                                                                                        <ColorAnimation Storyboard.TargetName="Cross" Storyboard.TargetProperty="(Path.Stroke).(SolidColorBrush.Color)" To="White"/>
                                                                                    </Storyboard>
                                                                                </VisualState>
                                                                            </VisualStateGroup>
                                                                        </VisualStateManager.VisualStateGroups>
                                                                    </Border>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </Button.Style>
                                            </Button>
                                        </StackPanel>

                                        <!--Current Page-->
                                        <TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type NavigationWindow}}, Path=Content.Title}" Margin="10,0,0,0" VerticalAlignment="Center" Foreground="{DynamicResource ColorText}"/>

                                    </DockPanel>

                                    <Grid local:clsOnScreenKeyboardSpacer.IsEnabled="False" SnapsToDevicePixels="True" DockPanel.Dock="Bottom" Margin="0,0,0,0" Visibility="Collapsed"/>

                                    <!--Window Content-->
                                    <AdornerDecorator>
                                        <ContentPresenter x:Name="PART_NavWinCP" ClipToBounds="true" />
                                    </AdornerDecorator>

                                </DockPanel>

                            </Border>
                            
                        </Border>
                        
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type Frame}" x:Key="FrameWithoutNavigationUI">
            <Setter Property="Background" Value="{DynamicResource ColorElementBackground}" />
            <Setter Property="JournalOwnership" Value="OwnsJournal"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Frame}">
                        <Border BorderThickness="{TemplateBinding Border.BorderThickness}" Padding="{TemplateBinding Control.Padding}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}">
                            <ContentPresenter Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" Name="PART_FrameCP" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style TargetType="Page">
            <Setter Property="Background" Value="{DynamicResource ColorElementBackground}" />
            <Setter Property="FontSize" Value="{DynamicResource FontSizePage}" />
        </Style>

        <Style TargetType="{x:Type local:pgAbout}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgComputerBasicInformation}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgComputerLoginEventLog}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgComputerNetwork}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgContactBasicInformation}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgContactExchange}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgCreateObject}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgDomainBrowser}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgDomains}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgGroupBasicInformation}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgGroupOrganization}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgMain}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgObject}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgObjectAllAttributes}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgObjectMember}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgObjectMemberOf}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgObjects}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgOrganizationalUnitBasicInformation}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgPreferences}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgUserBasicInformation}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgUserObject}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgUserOrganization}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgUserPhoto}" BasedOn="{StaticResource {x:Type Page}}"/>
        <Style TargetType="{x:Type local:pgUserExchange}" BasedOn="{StaticResource {x:Type Page}}"/>

        <Style TargetType="Window">
            <EventSetter Event="Loaded" Handler="Window_Loaded"/>
            <Setter Property="Background" Value="{DynamicResource ColorWindowBackground}" />
        </Style>

        <Style TargetType="{x:Type local:wndErrorLog}" BasedOn="{StaticResource {x:Type Window}}"/>
        <!--<Style TargetType="{x:Type local:wndLog}" BasedOn="{StaticResource {x:Type Window}}"/>-->

        <Style TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="{DynamicResource ColorText}" />
        </Style>
        <Style TargetType="{x:Type Label}">
            <Setter Property="Foreground" Value="{DynamicResource ColorText}" />
        </Style>
        <Style TargetType="{x:Type TextBox}">
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="{DynamicResource ColorText}"/>
            <Setter Property="Background" Value="{DynamicResource ColorElementBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ColorButtonBackground}" />
        </Style>
        <Style TargetType="{x:Type PasswordBox}">
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="{DynamicResource ColorText}" />
            <Setter Property="Background" Value="{DynamicResource ColorElementBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ColorButtonBackground}" />
        </Style>
        <Style TargetType="{x:Type CheckBox}">
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="{DynamicResource ColorText}" />
        </Style>
        <Style TargetType="{x:Type RadioButton}">
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="{DynamicResource ColorText}" />
        </Style>

        <Style x:Key="LightButton" TargetType="{x:Type Button}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Background" Value="{DynamicResource ColorElementBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ColorElementBackground}" />
            <Setter Property="Foreground" Value="{DynamicResource ColorText}" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border BorderThickness="1,1,1,1" BorderBrush="{TemplateBinding BorderBrush}">
                            <Grid Background="{TemplateBinding Background}">
                                <Grid x:Name="Overlay" Background="{DynamicResource ColorButtonBackground}" Opacity="0"/>
                                <Border Padding="{TemplateBinding Padding}">
                                    <ContentPresenter x:Name="MyContentPresenter" 
                                              Content="{TemplateBinding Content}"
                                              HorizontalAlignment="Center" 
                                              VerticalAlignment="Center" />
                                </Border>
                            </Grid>

                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.2" />
                                        <VisualTransition GeneratedDuration="0" To="Pressed" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.3"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.6" Duration="0"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="{DynamicResource ColorButtonInactiveBackground}"/>
                    <Setter Property="Foreground" Value="{DynamicResource ColorText}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="ToggleButton">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Foreground" Value="{DynamicResource ColorText}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.2" />
                                        <VisualTransition GeneratedDuration="0" To="Pressed" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="MouseOverBackground" Storyboard.TargetProperty="Opacity" To="0.5"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <!--<ColorAnimation Duration="0" Storyboard.TargetName="Background" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#FF6DBDD1"/>-->
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="MouseOverBackground" Storyboard.TargetProperty="Opacity" To="1"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0.5"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To="0.3"/>
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" To="1"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>

                            <Border Opacity="0" x:Name="Background" Background="{DynamicResource ColorButtonBackground}" />
                            <Border Opacity="0" x:Name="MouseOverBackground" Background="{DynamicResource ColorButtonBackground}" />
                            <Border Opacity="0" x:Name="Border" BorderThickness="1" BorderBrush="{DynamicResource ColorButtonBackground}" />

                            <ContentPresenter
                              x:Name="contentPresenter"
                              Content="{TemplateBinding Content}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              Margin="{TemplateBinding Padding}"/>

                            <Border Opacity="0" x:Name="DisabledBackground" Background="{DynamicResource ColorElementBackground}" IsHitTestVisible="false" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
       
        <Style x:Key="ToggleRadioButton" TargetType="RadioButton" BasedOn="{StaticResource {x:Type RadioButton}}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Foreground" Value="{DynamicResource ColorText}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.2" />
                                        <VisualTransition GeneratedDuration="0" To="Pressed" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="MouseOverBackground" Storyboard.TargetProperty="Opacity" To="0.5"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <!--<ColorAnimation Duration="0" Storyboard.TargetName="Background" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#FF6DBDD1"/>-->
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="MouseOverBackground" Storyboard.TargetProperty="Opacity" To="1"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0.5"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To="0.3"/>
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" To="1"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>

                            <Border Opacity="0" x:Name="Background" Background="{DynamicResource ColorButtonBackground}" />
                            <Border Opacity="0" x:Name="MouseOverBackground" Background="{DynamicResource ColorButtonBackground}" />
                            <Border Opacity="0" x:Name="Border" BorderThickness="1" BorderBrush="{DynamicResource ColorButtonBackground}" />

                            <ContentPresenter
                              x:Name="contentPresenter"
                              Content="{TemplateBinding Content}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              Margin="{TemplateBinding Padding}"/>

                            <Border Opacity="0" x:Name="DisabledBackground" Background="{DynamicResource ColorElementBackground}" IsHitTestVisible="false" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type Button}" x:Key="ToolbarButton">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Background" Value="{DynamicResource ColorElementBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ColorButtonBackground}" />
            <Setter Property="Foreground" Value="{DynamicResource ColorText}" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border BorderThickness="0" BorderBrush="{TemplateBinding BorderBrush}">
                            <Grid Background="{TemplateBinding Background}">
                                <Grid x:Name="Overlay" Background="{DynamicResource ColorButtonBackground}" Opacity="0"/>
                                <Border Padding="{TemplateBinding Padding}">
                                    <ContentPresenter x:Name="MyContentPresenter" 
                                                  Content="{TemplateBinding Content}"
                                                  HorizontalAlignment="Center" 
                                                  VerticalAlignment="Center" />
                                </Border>
                            </Grid>

                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.2" />
                                        <VisualTransition GeneratedDuration="0" To="Pressed" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.3"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.6" Duration="0"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="{DynamicResource ColorElementBackground}"/>
                    <Setter Property="Foreground" Value="{DynamicResource ColorText}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style TargetType="Image">
            <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
        </Style>
        <Style TargetType="{x:Type GridSplitter}">
            <Setter Property="Background" Value="{DynamicResource ColorWindowBackground}" />
        </Style>
        <Style TargetType="{x:Type ToolTip}">
            <Setter Property="Foreground" Value="{DynamicResource ColorText}" />
            <Setter Property="Background" Value="{DynamicResource ColorWindowBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ColorElementBackground}" />
        </Style>
        <Style TargetType="{x:Type ToolBar}">
            <Setter Property="Foreground" Value="{DynamicResource ColorText}" />
            <Setter Property="Background" Value="{DynamicResource ColorElementBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ColorButtonBackground}" />
        </Style>
        <Style TargetType="{x:Type TabControl}">
            <Setter Property="Foreground" Value="{DynamicResource ColorText}" />
            <Setter Property="Background" Value="{DynamicResource ColorElementBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ColorButtonBackground}" />
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="{DynamicResource ColorWindowBackground}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type local:TabControlExtended}" BasedOn="{StaticResource {x:Type TabControl}}"/>
        <Style TargetType="{x:Type xctk:DateTimePicker}">
            <Setter Property="Foreground" Value="{DynamicResource ColorText}" />
            <Setter Property="Background" Value="{DynamicResource ColorElementBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ColorButtonBackground}" />
        </Style>
        <Style TargetType="{x:Type ProgressBar}">
            <Setter Property="Foreground" Value="{DynamicResource ColorButtonBackground}" />
            <Setter Property="Background" Value="{DynamicResource ColorElementBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ColorButtonBackground}" />
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource ColorButtonInactiveBackground}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ColorPickerStyle" TargetType="{x:Type xctk:ColorPicker}">
            <Setter Property="AdvancedButtonHeader" Value="Дополнительно"/>
            <Setter Property="AvailableColorsHeader" Value=""/>
            <Setter Property="StandardButtonHeader" Value="Стандарные"/>
            <Setter Property="RecentColorsHeader" Value=""/>
            <Setter Property="StandardColorsHeader" Value=""/>
            <Setter Property="AvailableColorsSortingMode" Value="HueSaturationBrightness" />
            <Setter Property="DisplayColorAndName" Value="False" />
        </Style>
        <Style TargetType="{x:Type TabItem}">
            <Setter Property="Foreground" Value="{DynamicResource ColorText}" />
            <Setter Property="Background" Value="{DynamicResource ColorElementBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ColorButtonBackground}" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TabItem">
                        <Grid Name="Panel" Margin="5,5,6,0">
                            <Grid x:Name="Overlay" Background="{DynamicResource ColorButtonBackground}" Opacity="0"/>
                            <ContentPresenter x:Name="ContentSite"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Center"
                                            ContentSource="Header"
                                            Margin="10,5"/>

                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.2" />
                                        <VisualTransition GeneratedDuration="0" To="Pressed" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.3"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Panel" Property="Background" Value="{DynamicResource ColorButtonBackground}" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="False">
                                <Setter TargetName="Panel" Property="Background" Value="{DynamicResource ColorElementBackground}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Panel" Property="Background" Value="{DynamicResource ColorWindowBackground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type TabPanel}">
            <Setter Property="Background" Value="{DynamicResource ColorElementBackground}" />
        </Style>

        <Style x:Key="ScrollBarThumbStyle" TargetType="{x:Type Thumb}">
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Margin" Value="1,0,1,0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Rectangle Fill="{DynamicResource ColorButtonBackground}" Margin="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Rectangle Fill="{DynamicResource ColorButtonBackground}" Margin="1" Opacity="0.1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid Background="Transparent">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="True" Width="8" HorizontalAlignment="Right">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="ScrollBar.PageUpCommand" Style="{StaticResource ScrollBarPageButtonStyle}">
                        </RepeatButton>
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBarThumbStyle}">
                        </Thumb>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="ScrollBar.PageDownCommand" Style="{StaticResource ScrollBarPageButtonStyle}">
                        </RepeatButton>
                    </Track.IncreaseRepeatButton>
                </Track>

                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualStateGroup.Transitions>
                            <VisualTransition GeneratedDuration="0:0:0.2" />
                            <VisualTransition GeneratedDuration="0" To="Pressed" />
                        </VisualStateGroup.Transitions>
                        <VisualState x:Name="Normal" />
                        <VisualState x:Name="MouseOver">
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(Track.Width)" To="20"/>
                            </Storyboard>
                        </VisualState>
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
            </Grid>
        </ControlTemplate>
        <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid Background="Transparent">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Track Name="PART_Track" Grid.Column="1" Height="6" VerticalAlignment="Bottom">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="ScrollBar.PageLeftCommand" Style="{StaticResource ScrollBarPageButtonStyle}">
                        </RepeatButton>
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBarThumbStyle}">
                        </Thumb>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="ScrollBar.PageRightCommand" Style="{StaticResource ScrollBarPageButtonStyle}">
                        </RepeatButton>
                    </Track.IncreaseRepeatButton>
                </Track>

                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualStateGroup.Transitions>
                            <VisualTransition GeneratedDuration="0:0:0.2" />
                            <VisualTransition GeneratedDuration="0" To="Pressed" />
                        </VisualStateGroup.Transitions>
                        <VisualState x:Name="Normal" />
                        <VisualState x:Name="MouseOver">
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(Track.Height)" To="20"/>
                            </Storyboard>
                        </VisualState>
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
            </Grid>
        </ControlTemplate>
        <Style TargetType="{x:Type ScrollBar}">
            <Setter Property="SnapsToDevicePixels"
          Value="True" />
            <Setter Property="OverridesDefaultStyle"
          Value="true" />
            <Style.Triggers>
                <Trigger Property="Orientation"
             Value="Horizontal">
                    <Setter Property="Width"
              Value="Auto" />
                    <Setter Property="Height"
              Value="19" />
                    <Setter Property="Template"
              Value="{StaticResource HorizontalScrollBar}" />
                </Trigger>
                <Trigger Property="Orientation"
             Value="Vertical">
                    <Setter Property="Width"
              Value="20" />
                    <Setter Property="Height"
              Value="Auto" />
                    <Setter Property="Template"
              Value="{StaticResource VerticalScrollBar}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type ScrollViewer}">
            <EventSetter Event="ManipulationBoundaryFeedback" Handler="ScrollViewer_ManipulationBoundaryFeedback"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid x:Name="Grid" Background="{DynamicResource ColorElementBackground}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            
                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Content="{TemplateBinding Content}"
                                Margin="{TemplateBinding Padding}"
                                Grid.Column="0"
                                Grid.Row="0"/>

                            <Rectangle Grid.Column="1" Grid.Row="1" Fill="{DynamicResource ColorElementBackground}"/>
                            
                            <ScrollBar x:Name="PART_VerticalScrollBar"
                                AutomationProperties.AutomationId="VerticalScrollBar"
                                Grid.Column="1"
                                Grid.Row="0"
                                Cursor="Arrow"
                                Maximum="{TemplateBinding ScrollableHeight}"
                                Minimum="0"
                                LargeChange="10"
                                Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                ViewportSize="{TemplateBinding ViewportHeight}"/>

                            <ScrollBar x:Name="PART_HorizontalScrollBar"
                                AutomationProperties.AutomationId="HorizontalScrollBar"
                                Grid.Column="0"
                                Grid.Row="1"
                                Cursor="Arrow"
                                Maximum="{TemplateBinding ScrollableWidth}"
                                Minimum="0"
                                LargeChange="10"
                                Orientation="Horizontal"
                                Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                ViewportSize="{TemplateBinding ViewportWidth}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="PathSeparator" TargetType="{x:Type Path}">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Margin" Value="5,0,5,0"/>
            <Setter Property="Data" Value="M 2 1 L 5 4 L 2 7 L 3 8 L 7 4 L 3 0 Z"/>
            <Setter Property="Fill" Value="{DynamicResource ColorText}"/>
        </Style>

        <Style TargetType="{x:Type TreeView}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
            <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True"/>
            <Setter Property="VirtualizingStackPanel.ScrollUnit" Value="Pixel"/>
            <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="None"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeView}">
                        <Border Name="Border" BorderThickness="1"
                            BorderBrush="{DynamicResource ColorButtonBackground}"
                            Background="{DynamicResource ColorElementBackground}" >
                            <ScrollViewer Focusable="False" CanContentScroll="False" Padding="4">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
            <Setter Property="Focusable"
          Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid Width="15" Height="13" Background="Transparent">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="Collapsed">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="Expanded">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked" />
                                    <VisualState x:Name="Indeterminate" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Path x:Name="Collapsed"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Margin="1,1,1,1"
                                Data="M 2 1 L 5 4 L 2 7 L 3 8 L 7 4 L 3 0 Z"
                                Fill="{DynamicResource ColorText}">
                            </Path>
                            <Path x:Name="Expanded"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Margin="1,1,1,1"
                                Data="M 1 3 L 5 7 L 9 3 L 8 2 L 5 5 L 2 2 Z"
                                Visibility="Hidden"                                
                                Fill="{DynamicResource ColorText}">
                            </Path>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TreeViewItemFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Rectangle Margin="0,0,0,0"
                                StrokeThickness="5"
                                Stroke="Black"
                                StrokeDashArray="1 2"
                                Opacity="0" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style TargetType="{x:Type TreeViewItem}">
            <Setter Property="MinHeight" Value="24"/>
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="Padding" Value="1,0,0,0" />
            <Setter Property="Foreground" Value="{DynamicResource ColorText}" />
            <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">

                        <StackPanel Name="Panel" Background="{TemplateBinding Background}">

                            <Grid PreviewDragEnter="DragDropHelper_PreviewDragEnter"
                                  PreviewDragLeave="DragDropHelper_PreviewDragLeave" 
                                  PreviewDrop="DragDropHelper_PreviewDragLeave">
                                
                                <Grid x:Name="Overlay" Background="{DynamicResource ColorButtonBackground}">
                                    <Grid.Style>
                                        <Style TargetType="Grid">
                                            <Setter Property="Opacity" Value="0"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid, AncestorLevel=1}, Path=IsMouseOver}" Value="True" >
                                                    <Setter Property="Opacity" Value="0.3"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid, AncestorLevel=1}, Path=(local:DragDropHelper.IsDragOver)}" Value="True">
                                                    <Setter Property="Opacity" Value="0.3"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Grid.Style>
                                </Grid>

                                <Grid Margin="{Binding Converter={StaticResource ConverterTreeViewItemDepthToMargin}, ConverterParameter=10, RelativeSource={RelativeSource TemplatedParent}}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="19" />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>

                                    <ToggleButton x:Name="Expander"
                                        Grid.Column="0"
                                        Style="{StaticResource ExpandCollapseToggleStyle}"
                                        ClickMode="Press"
                                        IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>

                                    <ContentPresenter x:Name="PART_Header"
                                        Grid.Column="1"
                                        ContentSource="Header"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>

                                </Grid>

                            </Grid>
                            
                            <ItemsPresenter x:Name="ItemsHost" Visibility="Collapsed" />

                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="SelectionStates">
                                    <VisualState x:Name="Selected">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.6"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unselected" />
                                    <VisualState x:Name="SelectedInactive">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.6"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="ExpansionStates">
                                    <VisualState x:Name="Expanded">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                         Storyboard.TargetName="ItemsHost">
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Collapsed" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            
                        </StackPanel>
                        
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="false" />
                                    <Condition Property="Width" Value="Auto" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="false" />
                                    <Condition Property="Height" Value="Auto" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        
        <!--For default ListView-->
        <Style TargetType="{x:Type ListView}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListView}">
                        <Border x:Name="Bd" BorderBrush="{DynamicResource ColorButtonBackground}" BorderThickness="1" Background="{DynamicResource ColorElementBackground}" SnapsToDevicePixels="true">
                            <ScrollViewer Padding="{TemplateBinding Padding}" Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ColorWindowBackground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--For Extended ListView-->
        <Style TargetType="{x:Type local:ListViewExtended}">
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
            <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True"/>
            <Setter Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="True"/>
            <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling"/>
            <Setter Property="VirtualizingStackPanel.ScrollUnit" Value="Pixel"/>
            <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="None"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type local:ListViewExtended}">
                        <Border x:Name="Bd" BorderBrush="{DynamicResource ColorButtonBackground}" BorderThickness="1" Background="{DynamicResource ColorElementBackground}" SnapsToDevicePixels="true">
                            <ScrollViewer Padding="{TemplateBinding Padding}" Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ColorWindowBackground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type GridViewColumnHeader}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="GridViewColumnHeader">
                        <Border BorderThickness="0,0,0.5,0" BorderBrush="{DynamicResource ColorButtonBackground}">
                            <Grid Margin="{TemplateBinding Padding}">
                                <TextBlock Text="{TemplateBinding Content}" Padding="5" />
                                <Thumb x:Name="PART_HeaderGripper"
                                    HorizontalAlignment="Right">
                                    <Thumb.Style>
                                        <Style TargetType="Thumb">
                                            <Setter Property="Width" Value="18"/>
                                            <Setter Property="Margin" Value="0,0,-9,0"/>
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                            <Setter Property="Cursor" Value="SizeWE"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type Thumb}">
                                                        <Border Padding="{TemplateBinding Padding}" Background="Transparent"/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Thumb.Style>
                                </Thumb>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--For default ListView-->
        <Style TargetType="ListViewItem">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Background" Value="{DynamicResource ColorElementBackground}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListViewItem">
                        <Grid Name="Panel" Background="{TemplateBinding Background}">
                            <Grid>
                                <Grid x:Name="Overlay" Background="{DynamicResource ColorButtonBackground}" Opacity="0"/>
                                <GridViewRowPresenter  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Grid>

                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.2" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.3"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Grid>
                        
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Panel" Property="Background" Value="{DynamicResource ColorButtonBackground}" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="False">
                                <Setter TargetName="Panel" Property="Background" Value="{DynamicResource ColorElementBackground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                        
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--For Extended ListView Icons Style-->
        <Style TargetType="local:ListViewItemExtended">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="local:ListViewItemExtended">
                        <Grid Name="Panel">
                            <Grid>
                                <Grid x:Name="Overlay" Background="{DynamicResource ColorButtonBackground}" Opacity="0"/>
                                <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Grid>

                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.2" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.3"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Panel" Property="Background" Value="{DynamicResource ColorButtonBackground}" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="False">
                                <Setter TargetName="Panel" Property="Background" Value="{DynamicResource ColorElementBackground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ListViewItemExtended_ViewStyleDetails" TargetType="local:ListViewItemExtended">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="local:ListViewItemExtended">
                        <Grid Name="Panel">
                            <Grid>
                                <Grid x:Name="Overlay" Background="{DynamicResource ColorButtonBackground}" Opacity="0"/>
                                <!--This is difference-->
                                <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Grid>

                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.2" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.3"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Panel" Property="Background" Value="{DynamicResource ColorButtonBackground}" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="False">
                                <Setter TargetName="Panel" Property="Background" Value="{DynamicResource ColorElementBackground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ListViewExtended_ViewStyleTiles" TargetType="{x:Type local:ListViewExtended}" BasedOn="{StaticResource {x:Type local:ListViewExtended}}">
            <Setter Property="ItemTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <VirtualizingStackPanel Orientation="Horizontal">
                            <ContentControl Content="{Binding StatusImage, Converter={StaticResource ConverterDataToUIElement}}" Width="48" Height="48" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"/>
                            <VirtualizingStackPanel Orientation="Vertical" VerticalAlignment="Stretch" Margin="5,0,0,0">
                                <ContentControl Content="{Binding name, Converter={StaticResource ConverterDataToUIElement}}" FontWeight="Medium"/>
                                <ContentControl Content="{Binding userPrincipalName, Converter={StaticResource ConverterDataToUIElement}}" FontWeight="Light"/>
                                <ContentControl Content="{Binding description, Converter={StaticResource ConverterDataToUIElement}}" FontWeight="Light"/>
                            </VirtualizingStackPanel>
                        </VirtualizingStackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <local:VirtualizingWrapPanel/>
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
            <Style.Resources>
                <Style TargetType="local:ListViewItemExtended" BasedOn="{StaticResource {x:Type local:ListViewItemExtended}}">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="Margin" Value="5" />
                    <Setter Property="Width" Value="250" />
                </Style>
                <Style TargetType="GridViewColumnHeader">
                    <Setter Property="Visibility" Value="Collapsed" />
                </Style>
            </Style.Resources>
        </Style>

        <Style x:Key="ListViewExtended_ViewStyleMediumIcons" TargetType="{x:Type local:ListViewExtended}" BasedOn="{StaticResource {x:Type local:ListViewExtended}}">
            <Setter Property="ItemTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <VirtualizingStackPanel Orientation="Vertical">
                            <ContentControl Content="{Binding StatusImage, Converter={StaticResource ConverterDataToUIElement}}" Width="48" Height="48" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"/>
                            <ContentControl Content="{Binding name, Converter={StaticResource ConverterDataToUIElement}}" TextBlock.TextAlignment="Center"/>
                        </VirtualizingStackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <local:VirtualizingWrapPanel/>
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
            <Style.Resources>
                <Style TargetType="local:ListViewItemExtended" BasedOn="{StaticResource {x:Type local:ListViewItemExtended}}">
                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="Margin" Value="5" />
                    <Setter Property="Width" Value="100" />
                </Style>
                <Style TargetType="GridViewColumnHeader">
                    <Setter Property="Visibility" Value="Collapsed" />
                </Style>
            </Style.Resources>
        </Style>

        <Style x:Key="ListViewExtended_ViewStyleList" TargetType="{x:Type local:ListViewExtended}" BasedOn="{StaticResource {x:Type local:ListViewExtended}}">
            <Setter Property="ItemTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <VirtualizingStackPanel Orientation="Horizontal">
                            <ContentControl Content="{Binding Image, Converter={StaticResource ConverterDataToUIElement}}" Width="16" Height="16" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"/>
                            <ContentControl Content="{Binding name, Converter={StaticResource ConverterDataToUIElement}}" Margin="5,0,0,0"/>
                        </VirtualizingStackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <local:VirtualizingWrapPanel Orientation="Vertical"/>
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
            <Style.Resources>
                <Style TargetType="local:ListViewItemExtended" BasedOn="{StaticResource {x:Type local:ListViewItemExtended}}">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="Margin" Value="5,1,5,1" />
                    <Setter Property="Width" Value="250" />
                </Style>
                <Style TargetType="GridViewColumnHeader">
                    <Setter Property="Visibility" Value="Collapsed" />
                </Style>
            </Style.Resources>
        </Style>

        <Style x:Key="ListViewExtended_ViewStyleList_Small" TargetType="{x:Type local:ListViewExtended}" BasedOn="{StaticResource {x:Type local:ListViewExtended}}">
            <Setter Property="ItemTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <VirtualizingStackPanel Orientation="Horizontal">
                            <ContentControl Content="{Binding Image, Converter={StaticResource ConverterDataToUIElement}}" Width="16" Height="16" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"/>
                            <ContentControl Content="{Binding name, Converter={StaticResource ConverterDataToUIElement}}" Margin="5,0,0,0"/>
                        </VirtualizingStackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel Orientation="Vertical"/>
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
            <Style.Resources>
                <Style TargetType="local:ListViewItemExtended" BasedOn="{StaticResource {x:Type local:ListViewItemExtended}}">
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="Margin" Value="5,1,5,1" />
                </Style>
                <Style TargetType="GridViewColumnHeader">
                    <Setter Property="Visibility" Value="Collapsed" />
                </Style>
            </Style.Resources>
        </Style>

        <Style x:Key="ListViewExtended_ViewStyleDetails" TargetType="{x:Type local:ListViewExtended}" BasedOn="{StaticResource {x:Type local:ListViewExtended}}">
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel HorizontalAlignment="Left"/>
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
            <Style.Resources>
                <Style TargetType="local:ListViewItemExtended" BasedOn="{StaticResource ListViewItemExtended_ViewStyleDetails}">
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="Margin" Value="5,1,5,1" />
                </Style>
                <Style TargetType="GridViewColumnHeader" BasedOn="{StaticResource {x:Type GridViewColumnHeader}}">
                    <Setter Property="Visibility" Value="Visible" />
                </Style>

            </Style.Resources>
        </Style>

        <Style x:Key="ListViewExtended_GroupItemStyle" TargetType="{x:Type GroupItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Expander IsExpanded="True">
                            <Expander.Header>
                                <DockPanel>
                                    <TextBlock FontWeight="Medium" Margin="10" VerticalAlignment="Center"><Run Text="{Binding Name, Mode=OneWay}"/> (<Run Text="{Binding ItemCount, Mode=OneWay}"/>)</TextBlock>
                                    <Separator Background="{DynamicResource ColorButtonBackground}" VerticalAlignment="Center" Margin="0,3,0,0"/>
                                </DockPanel>
                            </Expander.Header>
                            <ItemsPresenter />
                        </Expander>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type ListBox}">
            <Setter Property="Background" Value="{DynamicResource ColorElementBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ColorButtonBackground}" />
        </Style>

        <Style TargetType="ListBoxItem">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Grid Name="Panel">
                            <Grid>
                                <Grid x:Name="Overlay" Background="{DynamicResource ColorButtonBackground}" Opacity="0"/>
                                <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Grid>

                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.2" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.3"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Panel" Property="Background" Value="{DynamicResource ColorButtonBackground}" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="False">
                                <Setter TargetName="Panel" Property="Background" Value="{DynamicResource ColorElementBackground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style TargetType="{x:Type DataGrid}">
            <Setter Property="Background" Value="{DynamicResource ColorElementBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ColorButtonBackground}" />
            <Setter Property="Foreground" Value="{DynamicResource ColorText}" />
        </Style>
        <Style TargetType="{x:Type DataGridColumnHeader}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="DataGridColumnHeader">
                        <Border BorderThickness="0,0,0.5,0" BorderBrush="{DynamicResource ColorButtonBackground}">
                            <Grid Margin="{TemplateBinding Padding}">
                                <TextBlock Text="{TemplateBinding Content}" Padding="5" />
                                <Thumb x:Name="PART_RightHeaderGripper"
                                    HorizontalAlignment="Right"
                                    Width="5"
                                    BorderThickness="3"
                                    BorderBrush="Transparent"
                                    Cursor="SizeWE">
                                </Thumb>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type Button}" x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Background" Value="{DynamicResource ColorButtonBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ColorButtonBackground}" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border BorderThickness="1,1,1,1" BorderBrush="{TemplateBinding BorderBrush}" >
                            <Grid Background="{TemplateBinding Background}">
                                <ContentPresenter x:Name="MyContentPresenter" 
                                              Content="{TemplateBinding Content}"
                                              HorizontalAlignment="Center" 
                                              VerticalAlignment="Center" />
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type DataGridRowHeader}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="DataGridRowHeader">
                        <Grid Margin="{TemplateBinding Padding}">
                            <TextBlock Text="{TemplateBinding Content}" Padding="5" />
                            <Thumb x:Name="PART_BottomHeaderGripper"
                                VerticalAlignment="Bottom"
                                Height="2" BorderThickness="1"
                                Cursor="SizeNS">
                            </Thumb>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type DataGridRow}">
            <Setter Property="BorderThickness" Value="0"/>
            <Style.Triggers>
                <Trigger Property="ItemsControl.AlternationIndex"  Value="0">
                    <Setter Property="Background" Value="{DynamicResource ColorListviewRow}" />
                </Trigger>
                <Trigger Property="ItemsControl.AlternationIndex"  Value="1">
                    <Setter Property="Background" Value="{DynamicResource ColorListviewAlternationRow}" />
                </Trigger>
                <!--<EventTrigger RoutedEvent="Loaded">
                    <EventTrigger.Actions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:.3" />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger.Actions>
                </EventTrigger>-->
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type DataGridCell}">
            <Setter Property="Foreground" Value="{DynamicResource ColorText}" />
            <Setter Property="BorderThickness" Value="0"/>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True" />
                        <Condition Property="Selector.IsSelectionActive" Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource ColorButtonBackground}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True" />
                        <Condition Property="Selector.IsSelectionActive" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource ColorButtonInactiveBackground}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <ControlTemplate x:Key="GridViewExpanderToggleButton" TargetType="{x:Type ToggleButton}">
            <Grid Margin="10,0,0,0" Width="15" Height="15" Background="Transparent">
                <Grid x:Name="Overlay" Background="{DynamicResource ColorButtonBackground}" Opacity="0"/>
                <Path x:Name="CollapsedArrow"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="M 2 0 L 7 5 L 2 10 L 4 10 L 9 5 L 4 0 Z"
                        Fill="{DynamicResource ColorButtonBackground}"/>
                <Path x:Name="ExpandededArrow"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Visibility="Collapsed"
                        Data="M 0 4 L 5 9 L 10 4 L 10 2 L 5 7 L 0 2 Z"
                        Fill="{DynamicResource ColorButtonBackground}"/>
                
                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualStateGroup.Transitions>
                            <VisualTransition GeneratedDuration="0:0:0.2" />
                            <VisualTransition GeneratedDuration="0" To="Pressed" />
                        </VisualStateGroup.Transitions>
                        <VisualState x:Name="Normal" />
                        <VisualState x:Name="MouseOver">
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.3"/>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Pressed">
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.6" Duration="0"/>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Disabled"/>
                    </VisualStateGroup>
                    <VisualStateGroup x:Name="CheckStates">
                        <VisualState x:Name="Checked">
                            <Storyboard>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                               Storyboard.TargetName="CollapsedArrow">
                                    <DiscreteObjectKeyFrame KeyTime="0"
                                          Value="{x:Static Visibility.Hidden}" />
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                               Storyboard.TargetName="ExpandededArrow">
                                    <DiscreteObjectKeyFrame KeyTime="0"
                                          Value="{x:Static Visibility.Visible}" />
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Unchecked" />
                        <VisualState x:Name="Indeterminate" />
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
            </Grid>
        </ControlTemplate>

        <Style x:Key="ToolbarExpanderToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="{DynamicResource ColorElementBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ColorButtonBackground}" />
            <Setter Property="Foreground" Value="{DynamicResource ColorText}" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid x:Name="Overlay" Background="{DynamicResource ColorButtonBackground}" Opacity="0"/>
                            <Path x:Name="CollapsedArrow"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="M 0 4 L 5 9 L 10 4 L 10 2 L 5 7 L 0 2 Z"
                                Fill="{DynamicResource ColorText}"/>
                            <Path x:Name="ExpandededArrow"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Visibility="Collapsed"
                                Data="M 0 7 L 5 2 L 10 7 L 10 9 L 5 4 L 0 9 Z"
                                Fill="{DynamicResource ColorText}"/>

                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.2" />
                                        <VisualTransition GeneratedDuration="0" To="Pressed" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.3"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="(Grid.Opacity)" To="0.6" Duration="0"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled"/>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                       Storyboard.TargetName="CollapsedArrow">
                                                <DiscreteObjectKeyFrame KeyTime="0"
                                                  Value="{x:Static Visibility.Hidden}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                       Storyboard.TargetName="ExpandededArrow">
                                                <DiscreteObjectKeyFrame KeyTime="0"
                                                  Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked" />
                                    <VisualState x:Name="Indeterminate" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>
        
        <Style TargetType="{x:Type Expander}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition x:Name="ContentRow" Height="0" />
                            </Grid.RowDefinitions>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                    <VisualState x:Name="Disabled" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border x:Name="Border"
                                  Grid.Row="0"
                                  BorderThickness="1"
                                  CornerRadius="2,2,0,0">
                                
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <ToggleButton OverridesDefaultStyle="True" Template="{StaticResource GridViewExpanderToggleButton}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <ContentPresenter Grid.Column="1" Margin="4" ContentSource="Header" RecognizesAccessKey="True" />
                                </Grid>
                            </Border>
                            <Border x:Name="Content"
                                  Grid.Row="1"
                                  BorderThickness="1,0,1,1"
                                  CornerRadius="0,0,2,2">
                                <ContentPresenter Margin="4" />
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="True">
                                <Setter TargetName="ContentRow" Property="Height" Value="{Binding Height, ElementName=Content}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
       
        
        <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <Border
                  x:Name="Border" 
                  Grid.ColumnSpan="2"
                  CornerRadius="0"
                  Background="{DynamicResource ColorElementBackground}"
                  BorderBrush="{DynamicResource ColorButtonBackground}"
                  BorderThickness="1" />
                <Border 
                  Grid.Column="0"
                  CornerRadius="0" 
                  Margin="1" 
                  Background="{DynamicResource ColorElementBackground}" 
                  BorderBrush="{DynamicResource ColorButtonBackground}"
                  BorderThickness="0,0,1,0" />
                <Path 
                  x:Name="Arrow"
                  Grid.Column="1"     
                  Fill="{DynamicResource ColorText}"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                />
            </Grid>
            <!--<ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#808080" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#E0E0E0" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="#EEEEEE" />
                <Setter TargetName="Border" Property="BorderBrush" Value="#AAAAAA" />
                <Setter Property="Foreground" Value="#888888"/>
                <Setter TargetName="Arrow" Property="Fill" Value="#888888" />
            </Trigger>
        </ControlTemplate.Triggers>-->
        </ControlTemplate>

        <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
            <Border x:Name="PART_ContentHost" Focusable="False" Background="{DynamicResource ColorElementBackground}" />
        </ControlTemplate>

        <Style TargetType="{x:Type ComboBox}">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="MinWidth" Value="120"/>
            <Setter Property="MinHeight" Value="20"/>
            <Setter Property="Background" Value="{DynamicResource ColorElementBackground}"/>
            <Setter Property="Foreground" Value="{DynamicResource ColorText}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <ToggleButton 
                            Name="ToggleButton" 
                            Template="{StaticResource ComboBoxToggleButton}" 
                            Grid.Column="2" 
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                            </ToggleButton>
                            <ContentPresenter Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="3,3,23,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                            <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="3,3,23,3"
                            Focusable="True" 
                            Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}"
                            Background="{TemplateBinding Background}"
                            Foreground="{TemplateBinding Foreground}"/>
                            <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True" 
                            Focusable="False"
                            PopupAnimation="Slide">

                                <Grid Name="DropDown"
                              SnapsToDevicePixels="True"                
                              MinWidth="{TemplateBinding ActualWidth}"
                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border 
                                x:Name="DropDownBorder"
                                Background="{DynamicResource ColorElementBackground}"

                                BorderThickness="1"
                                BorderBrush="{DynamicResource ColorButtonBackground}"/>
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource ColorText}"/>
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                                <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                                <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                            </Trigger>
                            <Trigger Property="IsEditable"  Value="true">
                                <Setter Property="IsTabStop" Value="false"/>
                                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type ComboBoxItem}">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                        <Border Name="Border"
                              Padding="2"
                              SnapsToDevicePixels="true">
                            <ContentPresenter />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ColorButtonBackground}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource ColorText}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Margin" Value="0,0,0,0" />
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Separator">
                        <Border 
                            BorderBrush="{DynamicResource ColorButtonBackground}" 
                            BorderThickness="0" 
                            Background="{DynamicResource ColorButtonBackground}" 
                            Height="1" 
                            SnapsToDevicePixels="true"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="ContextMenu">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="HasDropShadow" Value="True"/>
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ContextMenu">
                        <Border x:Name="Border"
                            Background="{DynamicResource ColorMenuBackground}" 
                            BorderThickness="1"
                            BorderBrush="{DynamicResource ColorButtonBackground}">
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Menu">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Menu">
                        <Border x:Name="Border"
                            Background="{DynamicResource ColorMenuBackground}"
                            BorderThickness="0"
                            BorderBrush="{DynamicResource ColorButtonBackground}">
                            <StackPanel IsItemsHost="True" ClipToBounds="True" Orientation="Horizontal"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style TargetType="MenuItem">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="MenuItem">
                        <Border x:Name="Border" BorderThickness="0" Height="30">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                    <ColumnDefinition x:Name="Col3" />
                                </Grid.ColumnDefinitions>

                                <!-- ContentPresenter to show an Icon if needed -->
                                <ContentPresenter Grid.Column="0" Margin="7,0,0,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon" Height="16" Width="16"/>

                                <!-- Glyph is a checkmark if needed for a checkable menu -->
                                <Grid Grid.Column="0" Visibility="Collapsed" Margin="7,0,0,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                    <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{DynamicResource ColorText}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                                </Grid>

                                <!-- Content for the menu text etc -->
                                <ContentPresenter Grid.Column="1"
                                Margin="7,0,14,0"
                                x:Name="HeaderHost"
                                RecognizesAccessKey="True"
                                ContentSource="Header"
                                VerticalAlignment="Center"
                                />

                                <!-- Content for the menu IGT -->
                                <ContentPresenter Grid.Column="2"
                                Margin="0,0,7,0"
                                x:Name="IGTHost"
                                ContentSource="InputGestureText"
                                VerticalAlignment="Center"
                                />

                                <!-- Arrow drawn path which points to the next level of the menu -->
                                <Grid Grid.Column="3" Margin="0,0,7,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                    <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{DynamicResource ColorText}" Data="M0,0 L0,8 L4,4 z"/>
                                </Grid>

                                <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                                <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                    <Border x:Name="SubMenuBorder" BorderBrush="{DynamicResource ColorButtonBackground}" BorderThickness="1" Padding="0">
                                        <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True" Background="{DynamicResource ColorMenuBackground}">
                                            <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                        </Grid>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>

                        <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                        <ControlTemplate.Triggers>
                            <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                            <Trigger Property="Role" Value="TopLevelHeader">
                                <Setter Property="Padding" Value="6,1,6,1"/>
                                <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                                <Setter Property="MinWidth" Value="2" TargetName="Col0"/>
                                <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            </Trigger>

                            <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                            <Trigger Property="Role" Value="TopLevelItem">
                                <Setter Property="Padding" Value="6,1,6,1"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            </Trigger>

                            <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                            <Trigger Property="Role" Value="SubmenuHeader">
                                <Setter Property="DockPanel.Dock" Value="Top"/>
                                <Setter Property="Padding" Value="0,2,0,2"/>
                            </Trigger>

                            <!-- Role = SubMenuItem : this is a child menu item which has children-->
                            <Trigger Property="Role" Value="SubmenuItem">
                                <Setter Property="DockPanel.Dock" Value="Top"/>
                                <Setter Property="Padding" Value="0,2,0,2"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            </Trigger>
                            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                            </Trigger>

                            <!-- If no Icon is present the we collapse the Icon Content -->
                            <!--<Trigger Property="Icon" Value="{x:Null}">
                                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            </Trigger>-->

                            <!-- The GlyphPanel contains the CheckMark -->
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            </Trigger>

                            <!--Using the system colors for the Menu Highlight and IsEnabled-->
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter Property="Background" Value="{DynamicResource ColorButtonBackground}" TargetName="Border"/>
                                <Setter Property="Foreground" Value="{DynamicResource ColorText}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource ColorButtonBackground}" TargetName="Border"/>
                            </Trigger>
                            <Trigger Property="IsHighlighted" Value="false">
                                <Setter Property="Background" Value="{DynamicResource ColorMenuBackground}" TargetName="Border"/>
                                <Setter Property="Foreground" Value="{DynamicResource ColorText}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource ColorButtonBackground}" TargetName="Border"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
    </Application.Resources>

</Application>
